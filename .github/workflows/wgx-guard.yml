name: wgx-guard
permissions:
  id-token: write
  contents: read
on:
  push:
    paths:
      - ".wgx/**"
      - ".wgx/profile.example.yml"
      - ".github/workflows/**"
      - "pyproject.toml"
      - "uv.lock"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".wgx/**"
      - ".wgx/profile.example.yml"
      - ".github/workflows/**"
      - "pyproject.toml"
      - "uv.lock"
      - "Cargo.toml"
  workflow_dispatch:
  
jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: wgx-guard-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Ensure bash is available
        id: ensure-bash
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          if ! command -v bash >/dev/null 2>&1; then
            echo "::notice::bash not found – attempting installation"
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              case "$ID" in
                alpine)
                  if command -v apk >/dev/null 2>&1; then
                    apk add --no-cache bash || true
                  fi
                  ;;
                debian|ubuntu)
                  if command -v apt-get >/dev/null 2>&1; then
                    apt-get update
                    apt-get install -y bash || true
                  fi
                  ;;
                fedora|rhel|centos)
                  if command -v yum >/dev/null 2>&1; then
                    yum install -y bash || true
                  elif command -v dnf >/dev/null 2>&1; then
                    dnf install -y bash || true
                  fi
                  ;;
              esac
            elif command -v brew >/dev/null 2>&1; then
              brew install bash || true
            fi
          fi
          if command -v bash >/dev/null 2>&1; then
            bash -lc 'set -euo pipefail; bash --version'
            echo "has-bash=true" >>"$GITHUB_OUTPUT"
          else
            echo "::warning::bash not available on this runner. Shell-dependent steps will be skipped."
            echo "has-bash=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Repo smoke (ultra-fast)
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          echo "ref=${{ github.ref }} sha=${{ github.sha }}"
          test -s README.md || echo "::warning::README.md missing or empty"
          if [ -f Cargo.toml ]; then
            if command -v cargo >/dev/null 2>&1; then
              cargo metadata --no-deps >/dev/null
            else
              echo "::notice::Cargo.toml present but 'cargo' not found – skipping Rust smoke"
            fi
          fi
          if [ -f pyproject.toml ]; then
            grep -q '^[[:space:]]*\[project\]' pyproject.toml || echo "::warning::[project] section not found in pyproject.toml"
          fi

      - name: Check tracked .wgx profile presence (no fallbacks)
        shell: sh
        run: |
          set -eu
          (set -o pipefail) 2>/dev/null && set -o pipefail || true
          if [ "${WGX_ALLOW_NO_PROFILE:-}" = "1" ]; then
            echo "::warning::Skipping profile check due to WGX_ALLOW_NO_PROFILE=1"
            exit 0
          fi
          if files="$(git ls-files -- .wgx/profile.yml .wgx/profile.example.yml)"; then
            if [ -n "$files" ]; then
              echo "OK: tracked wgx profile(s):"
              printf '%s\n' "$files"
              exit 0
            fi
          fi
          echo "::error::No tracked wgx profile found. Commit one of:"
          echo "::error::  • .wgx/profile.yml   (preferred for production config)"
          echo "::error::  • .wgx/profile.example.yml   (placeholder for CI)"
          echo
          echo "If you intended to use the example, run:"
          echo "  git add .wgx/profile.example.yml && git commit -m 'Add example profile for CI'"
          echo
          echo "If you have a local .wgx/profile.yml but it's ignored, remove it from .gitignore or commit the example file instead."
          echo "See README.md section '.wgx/profile (v1 / v1.1)' for details."
          exit 1

      - name: Install shellcheck (cached)
        if: steps.ensure-bash.outputs.has-bash == 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: shellcheck

      - name: Install shfmt (cached)
        if: steps.ensure-bash.outputs.has-bash == 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: shfmt

      - name: Shell Lint
        if: steps.ensure-bash.outputs.has-bash == 'true'
        run: |
          set -euo pipefail
          mapfile -t scripts < <(git ls-files '*.sh' '*.bash')
          if [ "${#scripts[@]}" -eq 0 ]; then
            echo "No shell scripts found; skipping lint."
            exit 0
          fi
          bash -n "${scripts[@]}"
          shfmt -d "${scripts[@]}"
          shellcheck -S style "${scripts[@]}"

      - name: Detect Python project
        id: python-project
        shell: sh
        run: |
          if [ -f pyproject.toml ]; then
            echo "present=true" >>"$GITHUB_OUTPUT"
          else
            echo "present=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Install uv
        if: steps.python-project.outputs.present == 'true'
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # GitHub Actions schreibt $GITHUB_PATH erst für nachfolgende Schritte um,
          # daher ergänzen wir den PATH zusätzlich für die aktuelle Shell.
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >>"$GITHUB_PATH"
          uv_version="$($HOME/.local/bin/uv --version | awk '{print $2}')"
          echo "UV_VERSION=$uv_version" >>"$GITHUB_ENV"

      - name: Cache uv
        if: steps.python-project.outputs.present == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ env.UV_VERSION || 'latest' }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Sync deps (uv)
        if: steps.python-project.outputs.present == 'true'
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          ~/.local/bin/uv sync --frozen

      - name: uv contracts (only if pyproject exists)
        if: steps.python-project.outputs.present == 'true'
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          if [ -f uv.lock ]; then
            echo "OK: uv.lock present"
          else
            echo "::error::uv.lock missing (pyproject.toml present)"
            exit 1
          fi
          export PATH="$HOME/.local/bin:$PATH"
          "$HOME/.local/bin/uv" --version
          echo "Running 'uv sync --frozen' to verify frozen installs..."
          "$HOME/.local/bin/uv" sync --frozen
          echo "uv contracts satisfied ✅"

      - name: Rust manifest check
        shell: sh
        run: |
          set -eu
          if (set -o pipefail) 2>/dev/null; then
            set -o pipefail
          fi
          if [ -f Cargo.toml ]; then
            rustup toolchain install stable --profile minimal
            cargo metadata --no-deps >/dev/null
          else
            echo "No Cargo.toml present – skipping."
          fi

      - name: Done
        shell: sh
        run: echo "wgx-guard passed ✅"
